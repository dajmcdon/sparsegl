[{"path":"https://dajmcdon.github.io/sparsegl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://dajmcdon.github.io/sparsegl/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"installing","dir":"Articles","previous_headings":"","what":"Installing","title":"Getting started with `sparsegl`","text":"package CRAN yet, can installed using [devtools] (https://cran.r-project.org/package=devtools) package: Building vignettes, getting started guide, takes significant amount time. included package default. want include vignettes, use modified command: getting-started vignette, firstly, randomly generate X, input matrix predictors dimension n-obs p-feature. initiate y, real-valued vector (make vector rather matrix), Linear Regression model: \\(y = X\\beta^* + \\epsilon\\). Logistic regression model: \\(y = (y_1, y_2, \\cdots, y_n)\\), \\(y_i \\sim \\text{Bernoulli}\\left(\\frac{1}{1 + \\exp(-X_i \\beta^*)}\\right)\\), \\(= 1, 2, \\cdots, n.\\) coefficient vector \\(\\beta^*\\) specified , white noise \\(\\epsilon\\) following standard normal distribution serves data variation. sparse group-lasso problem formulated sum mean squared error ( linear regression) logistic loss (logistic regression) convex combination lasso penalty group lasso penalty: Linear regression: \\[ \\min_{\\beta\\\\mathbb{R}^p}\\left(\\frac{1}{2n} \\rVert y - \\sum_g X^{(g)}\\beta^{(g)}\\rVert_2^2 + (1-\\alpha)\\lambda\\sum_g \\sqrt{\\text{bs}}\\rVert\\beta^{(g)}\\rVert_2 + \\alpha\\lambda\\rVert\\beta\\rVert_1 \\right) \\qquad (*). \\] Logistic regression: \\[ \\min_{\\beta\\\\mathbb{R}^p}\\left(\\frac{1}{2n}\\sum_{=1}^n \\log\\left(1 + \\exp\\left(-y_i\\beta^\\top X_i\\right)\\right) + (1-\\alpha)\\lambda\\sum_g \\sqrt{\\text{bs}}\\rVert\\beta^{(g)}\\rVert_2 + \\alpha\\lambda\\rVert\\beta\\rVert_1 \\right) \\qquad (**). \\] \\(X^{(g)}\\) submatrix \\(X\\) columns corresponding features group \\(g\\). \\(\\beta^{(g)}\\) corresponding coefficients features group \\(g\\). bs length \\(\\beta^{(g)}\\). \\(\\alpha\\) adjusts weight lasso penalty group-lasso penalty. \\(\\lambda\\) fine-tunes size penalty imposed model control number nonzero coefficients features, furthermore, avoid overfitting.","code":"devtools::install_github(\"dajmcdon/sparsegl\", ref = \"main\") devtools::install_github(\"dajmcdon/sparsegl\", ref = \"main\",                           build_vignettes = TRUE, dependencies = TRUE) library(sparsegl) set.seed(1010) n <- 100 p <- 200 X <- matrix(data = rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), c(2, -3, 8, 0, 0), rep(0, (p - 20))) groups <- rep(1:(p / 5), each = 5)  # Linear regression model eps <- rnorm(n, mean = 0, sd = 1) y <- X %*% beta_star + eps  # Logistic regression model pr <- 1 / (1 + exp(-X %*% beta_star)) y_binary <- rbinom(n, 1, pr)"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"sparsegl","dir":"Articles","previous_headings":"","what":"sparsegl()","title":"Getting started with `sparsegl`","text":"Given input matrix X, response vector y (matrix 1 column), sparse group-lasso regularized linear model fitted sequence penalty parameter values terms penalized maximum likelihood. penalty composed lasso penalty group lasso penalty. main arguments users might give : group: vector consecutive integers length p indicating grouping features. default, group contains one feature without initialization. family: character string specifying likelihood use, either linear regression “gaussian” logistic regression loss “binomial”. Default “gaussian”. pf: penalty vector length number groups total. Default value entry square-root corresponding size group, \\(\\sqrt{\\text{bs}}\\) \\((*)\\) \\((**)\\) . asparse: changes weight lasso penalty, referring \\(\\alpha\\) \\((*)\\) \\((**)\\) : asparse = \\(1\\) gives lasso penalty . asparse = \\(0\\) gives group lasso penalty . default value asparse \\(0.05\\). lower_bnd: lower bound coefficient values, vector length 1 number groups including non-positive numbers . Default value entry -\\(\\infty\\). upper_bnd: upper bound coefficient values, vector length 1 number groups including non-negative numbers . Default value entry \\(\\infty\\). returns sparsegl object, main attribute object : df: number nonzero coefficients lambda value. represents approximation exact degree--freedom. Detailed explanation can checked function estimate_risk() .","code":"fit1 <- sparsegl(X, y, group = groups)"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"plotting-function-plot-for-sparsegl-object","dir":"Articles","previous_headings":"sparsegl()","what":"Plotting function plot() for sparsegl object","title":"Getting started with `sparsegl`","text":"function produces nonzero-coefficient curves penalty parameter lambda values regularization path fitted sparsegl object. arguments function : y_axis: can set either “coef” “group”. Default “coef”. x_axis: can set either “lambda” “penalty”. Default “lambda”. elaborate y_axis x_axis: plot y_axis = “group” group norms log-lambda scaled group norm vector. group norm defined : \\[ \\text{asparse}\\times\\rVert\\beta^{(g)}\\rVert_1 + (1 - \\text{asparse})\\times\\sum_g\\rVert\\beta^{(g)}\\rVert_2 \\] Curves plotted color corresponding features group. Notice number curves shown plots less actual number groups since groups containing nonzero features least one lambda sequence lambda included. plot y_axis = “coef” coefficients features log-lambda scaled group norm vector. curve distinct color represents feature. , features nonzero coefficients least one lambda value sequence lambda considered. plot x_axis = “lambda” indicates x_axis presenting log-lambda. plot x_axis = “penalty” indicates x_axis presenting scaled group norm vector. element vector defined : \\[ \\frac{\\text{asparse}\\times\\rVert \\beta\\rVert_1 + (1-\\text{asparse})\\times\\sum_g\\rVert \\beta^{(g)}\\rVert_2}{\\max_\\beta\\left(\\text{asparse}\\times\\ \\rVert \\beta\\rVert_1 + (1-\\text{asparse})\\times\\sum_g\\rVert \\beta^{(g)}\\rVert_2\\right)} \\]","code":"plot(fit1, y_axis = \"group\", x_axis = \"lambda\") plot(fit1, y_axis = \"coef\", x_axis = \"penalty\", add_legend = FALSE)"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"coef-predict-and-print-sparsegl-object","dir":"Articles","previous_headings":"sparsegl()","what":"coef(), predict() and print() sparsegl object","title":"Getting started with `sparsegl`","text":"three functions consume fitted sparsegl object arguments coef() predict() return matrix coefficients predictions \\(\\hat{y}\\) given matrix X lambda respectively, unless optional argument s assigned specified vector numeric value (necessarily) original lambda sequence. print() returns number nonzero features nonzero coefficients lambda.","code":"coef <- coef(fit1, s = c(0.02, 0.03)) pred <- predict(fit1, newx = X[100,], s = fit1$lambda[2:3]) print(fit1)"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"cv-sparsegl","dir":"Articles","previous_headings":"","what":"cv.sparsegl()","title":"Getting started with `sparsegl`","text":"function k-fold cross-validation (cv) sparsegl. takes arguments X, y, group, specified , additional argument pred.loss. can set either “L2” “L1” linear regression model, “loss” “misclass” logistic regression model indicating loss use cv error. return cv.sparseg object.","code":"fit_l1 <- cv.sparsegl(X, y, group = groups, pred.loss = \"L1\")"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"plot-coef-and-predict-for-cv-sparsegl-object","dir":"Articles","previous_headings":"cv.sparsegl()","what":"plot(), coef() and predict() for cv.sparsegl object","title":"Getting started with `sparsegl`","text":"plot(): produces cross-validation curve upper lower confidence bounds plots lambda regularization path fitted cv.sparsegl object. generated plot, red points represent cvm values lambda, attached gray vertical error bars indicate uncertainty cvm.  coef() predict() cv.sparsegl object work similarly introduced . differences argument object passes fitted cv.sparsegl object, s can also set lambda.1se, lambda.min addition.","code":"plot(fit_l1) coef <- coef(fit_l1, s = \"lambda.1se\") pred <- predict(fit_l1, newx = X[50:80, ], s = \"lambda.min\")"},{"path":"https://dajmcdon.github.io/sparsegl/articles/sparsegl.html","id":"estimate_risk","dir":"Articles","previous_headings":"","what":"estimate_risk()","title":"Getting started with `sparsegl`","text":"function returns information criterion, sum maximum log-likelihood penalty term determined chosen penalty type sparsegl model lambda. provides means model selection representing trade-goodness fit model complexity model. takes arguments X y function sparsegl(). additional arguments needs : object: fitted sparsegl object. type: three types penalty used calculation: AIC (Akaike information criterion): 2 * df / n BIC (Bayesian information criterion): log(n) * df / n GCV (Generalized cross validation): -2 * log(1 - df / n) df degree--freedom, n sample size. approx_df: indicate vector approximation degree--freedom penalty parameter lambda used. Default FALSE program compute unbiased estimate exact degree--freedom. FYI: Degree--freedom tool assess complexity statistical modeling procedure. object$df, approximation degree--freedom number nonzero coefficients model. Notice take time calculate unbiased estimate exact degrees--freedom X complicated. details realize calculation, method implemented based paper https://arxiv.org/pdf/1212.6478.pdf.","code":"risk <- estimate_risk(fit1, X, type = \"AIC\", approx_df = FALSE)"},{"path":"https://dajmcdon.github.io/sparsegl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel J. McDonald. Author, maintainer. Xiaoxuan Liang. Author. Aaron Cohen. Author.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDonald D, Liang X, Cohen (2022). sparsegl: Sparse Group Lasso. R package version 0.4.0, https://github.com/dajmcdon/sparsegl/.","code":"@Manual{,   title = {sparsegl: Sparse Group Lasso},   author = {Daniel J. McDonald and Xiaoxuan Liang and Aaron Cohen},   year = {2022},   note = {R package version 0.4.0},   url = {https://github.com/dajmcdon/sparsegl/}, }"},{"path":"https://dajmcdon.github.io/sparsegl/index.html","id":"r-package-sparsegl","dir":"","previous_headings":"","what":"Sparse Group Lasso","title":"Sparse Group Lasso","text":"goal sparsegl fit regularization paths sparse group-lasso penalized learning problems. model fit sequence regularization parameter lambda.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sparse Group Lasso","text":"can install released version sparsegl CRAN : can install development version Github :","code":"install.packages(\"sparsegl\") # install.packages(\"remotes\") remotes::install_github(\"dajmcdon/sparsegl\")"},{"path":"https://dajmcdon.github.io/sparsegl/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal Example","title":"Sparse Group Lasso","text":"","code":"set.seed(1010) n <- 100 p <- 200 X <- matrix(data = rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p) eps <- rnorm(n, mean = 0, sd = 1) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0),                 rep(-5, 5), c(2, -3, 8, 0, 0), rep(0, (p - 20))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) plot(fit1, y_axis = \"coef\", x_axis = \"penalty\", add_legend = FALSE)"},{"path":"https://dajmcdon.github.io/sparsegl/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Sparse Group Lasso","text":"package documentation examples available online.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.cv.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","title":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","text":"function gets coefficients cross-validated sparsegl() model, using stored \"sparsegl.fit\" object, optimal value chosen lambda.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.cv.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","text":"","code":"# S3 method for cv.sparsegl coef(object, s = c(\"lambda.1se\", \"lambda.min\"), ...)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.cv.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","text":"object Fitted cv.sparsegl() object. s Value(s) penalty parameter lambda coefficients desired. Default single value s = \"lambda.1se\" stored CV object (corresponding largest value lambda CV error estimate within 1 standard error minimum). Alternatively s = \"lambda.min\" can used (corresponding minimum cross validation error estimate). s numeric, taken value(s) lambda used. ... used. arguments predict().","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.cv.sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","text":"coefficients requested value(s) lambda.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.cv.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coefficients from a cv.sparsegl object. — coef.cv.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) cv_fit <- cv.sparsegl(X, y, groups) coef(cv_fit, s = c(0.02, 0.03)) #> 21 x 2 sparse Matrix of class \"dgCMatrix\" #>                         1           2 #> (Intercept) -1.680821e-01 -0.16717474 #> V1           5.023338e+00  4.93783448 #> V2           5.020366e+00  4.93462580 #> V3           4.978541e+00  4.97599303 #> V4           5.022617e+00  4.91413305 #> V5           4.746140e+00  4.68890524 #> V6           4.661058e+00  4.50378967 #> V7          -4.824795e+00 -4.68973541 #> V8           1.788828e+00  1.69334453 #> V9          -4.498916e-02 -0.05136975 #> V10          4.732256e-02  0.08689660 #> V11         -4.803043e+00 -4.72390786 #> V12         -4.551384e+00 -4.39820057 #> V13         -4.499992e+00 -4.36842088 #> V14         -4.661369e+00 -4.51519258 #> V15         -4.736298e+00 -4.66806026 #> V16          8.203631e-04  .          #> V17         -3.832378e-04  .          #> V18          1.195529e-03  .          #> V19          6.123743e-05  .          #> V20         -6.873219e-04  ."},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model coefficients from a sparsegl object. — coef.sparsegl","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"Computes coefficients requested value(s) lambda sparsegl() object.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"","code":"# S3 method for sparsegl coef(object, s = NULL, ...)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"object Fitted sparsegl() object. s Value(s) penalty parameter lambda coefficients required. Default entire sequence. ... used.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"coefficients requested values lambda.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"s new vector predictions requested. s lambda sequence used fitting model, coef function use linear interpolation make predictions. new values interpolated using fraction coefficients left right lambda indices.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/coef.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model coefficients from a sparsegl object. — coef.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) coef(fit1, s = c(0.02, 0.03)) #> 21 x 2 sparse Matrix of class \"dgCMatrix\" #>                       1           2 #> (Intercept)  0.02411505  0.08290984 #> V1           4.60598955  4.50051684 #> V2           4.85750673  4.78201622 #> V3           4.77198263  4.65600680 #> V4           4.81698361  4.70246400 #> V5           4.85945399  4.77126981 #> V6           4.51058207  4.33461409 #> V7          -4.50443666 -4.35351038 #> V8           2.05537383  1.98575793 #> V9           0.13571754  0.17816718 #> V10          .           .          #> V11         -4.80674412 -4.71931848 #> V12         -4.70066280 -4.60826088 #> V13         -4.78061855 -4.66414054 #> V14         -4.72952835 -4.62600428 #> V15         -4.81205202 -4.72184603 #> V16          .           .          #> V17          .           .          #> V18          .           .          #> V19          .           .          #> V20          .           ."},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for a sparsegl object. — cv.sparsegl","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"k-fold cross-validation sparsegl(). function largely similar glmnet::cv.glmnet().","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"","code":"cv.sparsegl(   x,   y,   group = NULL,   family = c(\"gaussian\", \"binomial\"),   lambda = NULL,   pred.loss = c(\"L2\", \"L1\", \"binomial\", \"misclass\"),   nfolds = 10,   foldid = NULL,   ... )"},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"x Double. matrix predictors, dimension \\(n \\times p\\); row vector measurements column feature. Objects class Matrix::sparseMatrix supported. y Double/Integer/Factor. response variable. Quantitative family=\"gaussian\". family=\"binomial\" either factor two levels vector integers taking 2 unique values. factor, last level alphabetical order target class. group Integer. vector consecutive integers describing grouping coefficients (see example ). family Character. Specifies loss function use, valid options : \"gaussian\" - least squares loss (regression, default), \"binomial\" - logistic loss (classification) lambda user supplied lambda sequence. default, NULL results automatic computation based nlambda, smallest value lambda give null model (coefficient estimates equal zero), lambda.factor. Supplying value lambda overrides behaviour. likely better supply decreasing sequence lambda values single (small) value. supplied, user-defined lambda sequence automatically sorted decreasing order. pred.loss Loss use cross-validation error. Valid options : \"L2\" regression, mean square error \"L1\" regression, mean absolute error \"binomial\" classification, binomial deviance loss \"misclass\" classification, misclassification error. nfolds Number folds - default 10. Although nfolds can large sample size (leave-one-CV), recommended large datasets. Smallest value allowable nfolds = 3. foldid optional vector values 1 nfolds identifying fold observation . supplied, nfolds can missing. ... arguments can passed sparsegl.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"object class cv.sparsegl() returned, list ingredients cross-validation fit. lambda values lambda used fits. cvm mean cross-validated error - vector length length(lambda). cvsd Estimate standard error cvm. cvupper Upper curve = cvm + cvsd. cvlower Lower curve = cvm - cvsd. name text string indicating type measure (plotting purposes). sparsegl.fit fitted sparsegl() object full data. lambda.min optimal value lambda gives minimum cross validation error cvm. lambda.1se largest value lambda error within 1 standard error minimum.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"function runs sparsegl() nfolds + 1 times; first get lambda sequence, remainder compute fit folds omitted. average error standard deviation folds computed.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/cv.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation for a sparsegl object. — cv.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) cv_fit <- cv.sparsegl(X, y, groups)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate information criteria. — estimate_risk","title":"Calculate information criteria. — estimate_risk","text":"function uses degrees freedom calculate various information criteria. function uses \"unknown variance\" version likelihood. implemented Gaussian regression. constant ignored (stats::extractAIC()).","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate information criteria. — estimate_risk","text":"","code":"estimate_risk(object, x, type = c(\"AIC\", \"BIC\", \"GCV\"), approx_df = FALSE)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate information criteria. — estimate_risk","text":"object fitted object call sparsegl(). x Matrix. matrix predictors used estimate sparsegl object. May missing approx_df = TRUE. type one AIC, BIC, GCV. approx_df df component sparsegl object approximation (albeit fairly accurate one) actual degrees--freedom. However, exact value requires inverting portion X'X. computation may take time (default computes exact df).","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate information criteria. — estimate_risk","text":"data.frame many rows object$lambda. contains columns lambda, df, requested risk types.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate information criteria. — estimate_risk","text":"Vaiter S, Deledalle C, Peyré G, Fadili J, Dossal C. (2012). Degrees Freedom Group Lasso General Design. https://arxiv.org/pdf/1212.6478.pdf.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/estimate_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate information criteria. — estimate_risk","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) estimate_risk(fit1, type = \"AIC\", approx_df = TRUE) #>           lambda        df       AIC #> s0  4.046083e-01  0.000000 5.1898623 #> s1  3.686640e-01  5.290096 5.2900105 #> s2  3.359129e-01  7.161009 5.2565895 #> s3  3.060713e-01  7.821479 5.2062402 #> s4  2.788808e-01 13.984971 5.2593695 #> s5  2.541058e-01 21.827688 5.2872509 #> s6  2.315317e-01 23.765731 5.1765450 #> s7  2.109631e-01 23.010997 5.0101407 #> s8  1.922217e-01 25.282809 4.9010059 #> s9  1.751453e-01 25.659483 4.7502216 #> s10 1.595858e-01 25.924736 4.5941762 #> s11 1.454087e-01 26.119827 4.4340431 #> s12 1.324910e-01 26.268031 4.2707120 #> s13 1.207208e-01 26.383516 4.1048356 #> s14 1.099963e-01 26.475331 3.9371476 #> s15 1.002246e-01 26.549582 3.7681305 #> s16 9.132088e-02 26.610490 3.5982676 #> s17 8.320819e-02 26.661061 3.4280064 #> s18 7.581620e-02 26.703492 3.2577741 #> s19 6.908090e-02 26.739416 3.0879909 #> s20 6.294394e-02 26.770072 2.9190815 #> s21 5.735218e-02 24.818969 2.7121004 #> s22 5.225717e-02 24.839155 2.5462633 #> s23 4.761478e-02 24.856714 2.3827003 #> s24 4.338482e-02 24.872059 2.2219391 #> s25 3.953063e-02 24.885526 2.0645436 #> s26 3.601884e-02 24.897388 1.9111118 #> s27 3.281902e-02 24.907872 1.7622698 #> s28 2.990347e-02 24.917164 1.6186610 #> s29 2.724693e-02 24.925423 1.4809300 #> s30 2.482639e-02 24.932779 1.3499565 #> s31 2.262088e-02 24.939348 1.2258036 #> s32 2.061130e-02 24.945224 1.1092448 #> s33 1.878025e-02 30.017914 1.1014864 #> s34 1.711187e-02 33.286146 1.0636890 #> s35 1.559170e-02 33.979503 0.9821424 #> s36 1.420657e-02 34.427829 0.9039781 #> s37 1.294450e-02 34.741842 0.8316055 #> s38 1.179455e-02 34.969921 0.7652093 #> s39 1.074675e-02 35.143257 0.7053717 #> s40 9.792039e-03 35.278682 0.6520082 #> s41 8.922141e-03 35.386760 0.6048322 #> s42 8.129523e-03 35.474482 0.5634392 #> s43 7.407318e-03 35.546661 0.5273583 #> s44 6.749273e-03 35.606928 0.4962901 #> s45 6.149686e-03 35.657327 0.4693089 #> s46 5.603365e-03 35.700000 0.4461431 #> s47 5.105577e-03 33.798712 0.3875859 #> s48 4.652012e-03 33.822304 0.3706023 #> s49 4.238740e-03 33.842664 0.3561800 #> s50 3.862182e-03 33.860325 0.3439685 #> s51 3.519076e-03 35.837667 0.3728433 #> s52 3.206451e-03 35.855448 0.3642975 #> s53 2.921599e-03 33.901190 0.3176320 #> s54 2.662052e-03 35.884513 0.3509664 #> s55 2.425563e-03 35.896578 0.3458330 #> s56 2.210083e-03 35.907264 0.3415137 #> s57 2.013745e-03 33.936158 0.2983626 #> s58 1.834849e-03 35.925134 0.3350153 #> s59 1.671846e-03 35.932612 0.3324861 #> s60 1.523324e-03 35.939275 0.3304261 #> s61 1.387996e-03 35.945231 0.3286608 #> s62 1.264690e-03 35.950560 0.3271882 #> s63 1.152339e-03 35.955335 0.3259642 #> s64 1.049968e-03 35.959619 0.3249484 #> s65 9.566920e-04 35.963468 0.3241063 #> s66 8.717021e-04 35.966924 0.3234429 #> s67 7.942625e-04 35.970041 0.3228656 #> s68 7.237024e-04 35.972851 0.3223848 #> s69 6.594107e-04 35.975385 0.3219875 #> s70 6.008304e-04 35.977673 0.3216601 #> s71 5.474543e-04 35.979741 0.3213908 #> s72 4.988200e-04 35.981599 0.3212252 #> s73 4.545062e-04 35.983300 0.3209956 #> s74 4.141291e-04 35.984824 0.3208813 #> s75 3.773390e-04 35.986211 0.3207653 #> s76 3.438173e-04 35.987469 0.3206632 #> s77 3.132735e-04 35.988610 0.3205774 #> s78 2.854431e-04 35.989645 0.3205068 #> s79 2.600852e-04 35.990584 0.3204492 #> s80 2.369799e-04 35.991436 0.3204027 #> s81 2.159273e-04 35.992206 0.3203826 #> s82 1.967449e-04 35.992912 0.3203408 #> s83 1.792666e-04 35.993548 0.3203267 #> s84 1.633411e-04 35.994131 0.3202976 #> s85 1.488303e-04 35.994657 0.3202892 #> s86 1.356086e-04 35.995136 0.3202797 #> s87 1.235615e-04 35.995573 0.3202709 #> s88 1.125847e-04 35.995969 0.3202634 #> s89 1.025829e-04 35.996331 0.3202572 #> s90 9.346976e-05 35.996659 0.3202524 #> s91 8.516616e-05 35.996958 0.3202487 #> s92 7.760023e-05 35.997230 0.3202460 #> s93 7.070644e-05 35.997478 0.3202441 #> s94 6.442508e-05 35.997703 0.3202429 #> s95 5.870173e-05 35.997908 0.3202423 #> s96 5.348683e-05 35.998095 0.3202421 #> s97 4.873521e-05 35.998265 0.3202422 #> s98 4.440571e-05 35.998419 0.3202425 #> s99 4.046083e-05 35.998560 0.3202431"},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate common group norms — zero_norm","title":"Calculate common group norms — zero_norm","text":"Norm calculation","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate common group norms — zero_norm","text":"","code":"zero_norm(x)  one_norm(x)  two_norm(x)  grouped_zero_norm(x, gr)  grouped_one_norm(x, gr)  grouped_two_norm(x, gr)  grouped_sp_norm(x, gr, asparse)  gr_one_norm(x, gr)  gr_two_norm(x, gr)  sp_group_norm(x, gr, asparse = 0.05)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate common group norms — zero_norm","text":"x numeric vector. gr numeric vector length x. asparse weight put l1 norm calculating group norm.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate common group norms — zero_norm","text":"numeric scalar vector","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate common group norms — zero_norm","text":"zero_norm(): l0-norm (number nonzero entries). one_norm(): l1-norm (Absolute-value norm). two_norm(): l2-norm (Euclidean norm). grouped_zero_norm(): vector group-wise l0-norms. grouped_one_norm(): vector group-wise l1-norms. grouped_two_norm(): vector group-wise l2-norms. grouped_sp_norm(): vector length unique(gr) consisting asparse convex combination l1 l2-norm group. gr_one_norm(): l1-norm norm vector (scalar). gr_two_norm(): sum group-wise l2-norms vector (scalar). sp_group_norm(): sum asparse convex combination group l1 l2-norms vectors (scalar).","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/grouped_sp_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate common group norms — zero_norm","text":"","code":"x <- c(rep(-1, 5), rep(0, 5), rep(1,5)) gr <- c(rep(1,5), rep(2,5), rep(3,5)) asparse <- 0.05 grouped_sp_norm(x, gr, asparse) #> [1] 2.374265 0.000000 2.374265"},{"path":"https://dajmcdon.github.io/sparsegl/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dajmcdon.github.io/sparsegl/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.cv.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","title":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","text":"Plots cross-validation curve, upper lower standard deviation curves, function lambda values used. function modified based glmnet::plot.cv.glmnet().","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.cv.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","text":"","code":"# S3 method for cv.sparsegl plot(x, log_axis = c(\"xy\", \"x\", \"y\", \"none\"), sign.lambda = 1, ...)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.cv.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","text":"x Fitted cv.sparsegl() object log_axis Apply log scaling requested axes. sign.lambda Either plot log(lambda) (default) reverse sign.lambda < 0. ... used.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.cv.sparsegl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","text":"plot produced, ggplot2::ggplot() object. Additional user modifications can added desired.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.cv.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cross-validation curves produced from a cv.sparsegl object. — plot.cv.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) cv_fit <- cv.sparsegl(X, y, groups) plot(cv_fit)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot solution paths from a sparsegl object. — plot.sparsegl","title":"Plot solution paths from a sparsegl object. — plot.sparsegl","text":"Produces coefficient profile plot fitted sparsegl() object. result ggplot2::ggplot(). Additional user modifications can added desired.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot solution paths from a sparsegl object. — plot.sparsegl","text":"","code":"# S3 method for sparsegl plot(   x,   y_axis = c(\"coef\", \"group\"),   x_axis = c(\"lambda\", \"penalty\"),   add_legend = TRUE,   ... )"},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot solution paths from a sparsegl object. — plot.sparsegl","text":"x Fitted sparsegl() object. y_axis Variable y_axis. Either coefficients (default) group norm. x_axis Variable x-axis. Either (log)-lambda sequence (default) value penalty. second case, penalty scaled maximum along path. add_legend Show legend. Often, many groups/predictors, can become overwhelming. ... used.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/plot.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot solution paths from a sparsegl object. — plot.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) plot(fit1, y_axis = \"coef\", x_axis = \"penalty\")"},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.cv.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","title":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","text":"function makes predictions cross-validated cv.sparsegl() object, using stored \"sparsegl.fit\" object, value chosen lambda.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.cv.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","text":"","code":"# S3 method for cv.sparsegl predict(object, newx, s = c(\"lambda.1se\", \"lambda.min\"), ...)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.cv.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","text":"object Fitted cv.sparsegl() object. newx Matrix new values x predictions made. Must matrix. See documentation predict.sparsegl(). s Value(s) penalty parameter lambda coefficients desired. Default single value s = \"lambda.1se\" stored CV object (corresponding largest value lambda CV error estimate within 1 standard error minimum). Alternatively s = \"lambda.min\" can used (corresponding minimum cross validation error estimate). s numeric, taken value(s) lambda used. ... used. arguments predict().","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.cv.sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","text":"matrix vector predicted values.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.cv.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make predictions from a cv.sparsegl object. — predict.cv.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) cv_fit <- cv.sparsegl(X, y, groups) predict(cv_fit, newx = X[50:60, ], s = \"lambda.min\") #>                 1 #>  [1,]  13.4311471 #>  [2,]  -7.1652781 #>  [3,] -18.5338620 #>  [4,] -28.4218312 #>  [5,]  53.0922327 #>  [6,]  -9.3548752 #>  [7,]  -7.8211559 #>  [8,]   6.3172440 #>  [9,]  -3.7181626 #> [10,]  -3.8832594 #> [11,]   0.2366384"},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions from a sparsegl object. — predict.sparsegl","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"Similar predict methods, function produces fitted values class labels fitted sparsegl object.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"","code":"# S3 method for sparsegl predict(   object,   newx,   s = NULL,   type = c(\"link\", \"response\", \"coefficients\", \"nonzero\", \"class\"),   ... )"},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"object Fitted sparsegl() model object. newx Matrix new values x predictions made. Must matrix. s Value(s) penalty parameter lambda predictions required. Default entire sequence used create model. type Type prediction required. Type \"link\" gives linear predictors \"binomial\"; \"gaussian\" models gives fitted values. Type \"response\" gives fitted probabilities \"binomial\"; \"gaussian\" type \"response\" equivalent type \"link\". Type \"coefficients\" computes coefficients requested values s.  Note \"binomial\" models, results returned class corresponding second level factor response. Type \"class\" applies \"binomial\" models, produces class label corresponding maximum probability. Type \"nonzero\" returns list indices nonzero coefficients value s. ... used.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"object returned depends type.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"s new vector predictions requested. s lambda sequence used fitting model, function use linear interpolation make predictions. new values interpolated using fraction predicted values left right lambda indices.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/predict.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make predictions from a sparsegl object. — predict.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) predict(fit1, newx = X[10, ], s = fit1$lambda[3:5]) #>             1        2        3 #> [1,] 1.521381 3.075403 4.511709"},{"path":"https://dajmcdon.github.io/sparsegl/reference/print.sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a sparsegl object. — print.sparsegl","title":"Print a sparsegl object. — print.sparsegl","text":"Prints summary information fitted sparsegl() object.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/print.sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a sparsegl object. — print.sparsegl","text":"","code":"# S3 method for sparsegl print(x, digits = min(3, getOption(\"digits\") - 3), ...)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/print.sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a sparsegl object. — print.sparsegl","text":"x Fitted sparsegl() object. digits Significant digits printout. ... used","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/print.sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a sparsegl object. — print.sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit1 <- sparsegl(X, y, group = groups) print(fit1) #>  #> Call:  sparsegl(x = X, y = y, group = groups)  #>  #> Approx. degrees of freedom:  0  -  20  #> Range of lambda:  0.625  -  0  #> Saturated penalty:  31.732"},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":null,"dir":"Reference","previous_headings":"","what":"Regularization paths for sparse group-lasso models — sparsegl","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"Fits regularization paths sparse group-lasso penalized learning problems sequence regularization parameters lambda.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"","code":"sparsegl(   x,   y,   group = NULL,   family = c(\"gaussian\", \"binomial\"),   nlambda = 100,   lambda.factor = ifelse(nobs < nvars, 0.01, 1e-04),   lambda = NULL,   pf_group = sqrt(bs),   pf_sparse = rep(1, nvars),   intercept = TRUE,   asparse = 0.05,   standardize = TRUE,   lower_bnd = -Inf,   upper_bnd = Inf,   dfmax = as.integer(max(group)) + 1L,   pmax = min(dfmax * 1.2, as.integer(max(group))),   eps = 1e-08,   maxit = 3e+08 )"},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"x Double. matrix predictors, dimension \\(n \\times p\\); row vector measurements column feature. Objects class Matrix::sparseMatrix supported. y Double/Integer/Factor. response variable. Quantitative family=\"gaussian\". family=\"binomial\" either factor two levels vector integers taking 2 unique values. factor, last level alphabetical order target class. group Integer. vector consecutive integers describing grouping coefficients (see example ). family Character. Specifies loss function use, valid options : \"gaussian\" - least squares loss (regression, default), \"binomial\" - logistic loss (classification) nlambda number lambda values - default 100. lambda.factor factor getting minimal lambda lambda sequence, min(lambda) = lambda.factor * max(lambda). max(lambda) smallest value lambda coefficients zero. default depends relationship \\(n\\) (number rows matrix predictors) \\(p\\) (number predictors). \\(n \\geq p\\), default 0.0001.  \\(n < p\\), default 0.01. small value lambda.factor lead saturated fit. argument effect user-defined lambda sequence. lambda user supplied lambda sequence. default, NULL results automatic computation based nlambda, smallest value lambda give null model (coefficient estimates equal zero), lambda.factor. Supplying value lambda overrides behaviour. likely better supply decreasing sequence lambda values single (small) value. supplied, user-defined lambda sequence automatically sorted decreasing order. pf_group Penalty factor groups, vector length total number groups. Separate penalty weights can applied group \\(\\beta\\)s allow differential shrinkage. Can 0 groups, implies shrinkage, results group always included model (depending pf_sparse). Default value entry square-root corresponding size group. pf_sparse Penalty factor l1-norm, vector length total number columns x. value corresponds one predictor Can 0 predictors, implies predictor receive group l2-norm penalty. entry non-negative vector. intercept Whether include intercept model. Default TRUE. asparse weight put \\(\\ell_1\\)-norm sparse group lasso. Default 0.05. standardize Logical flag variable standardization (scaling) prior fitting model. Default TRUE. lower_bnd Lower bound coefficient values, vector length 1 length number groups. Must non-positive numbers . Default value entry -Inf. upper_bnd Upper coefficient values, vector length 1 length number groups. Must non-negative numbers . Default value entry Inf. dfmax Limit maximum number groups model. Default limit. pmax Limit maximum number groups ever nonzero. example group enters model, matter many times exits re-enters model path, counted . eps Convergence termination tolerance. Defaults value 1e-8. maxit Maximum number outer-loop iterations allowed fixed lambda value. Default 3e8. models converge, consider increasing maxit.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"object S3 class sparsegl(). call call produced object. b0 Intercept sequence length length(lambda). beta p x length(lambda) sparse matrix coefficients. df number features nonzero coefficients value lambda. dim Dimension coefficient matrix. lambda actual sequence lambda values used. npasses Total number iterations summed lambda values. jerr Error flag, warnings errors, 0 error. group vector consecutive integers describing grouping coefficients. nobs number observations used estimate model.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"Note objective function least squares $$RSS/(2n) + \\lambda penalty$$ Users can also tweak penalty choosing different penalty factor. computing speed reason, models converging running slowly, consider increasing eps, decreasing nlambda, increasing lambda.factor increasing maxit.","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/reference/sparsegl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regularization paths for sparse group-lasso models — sparsegl","text":"","code":"n <- 100 p <- 20 X <- matrix(rnorm(n * p), nrow = n) eps <- rnorm(n) beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15))) y <- X %*% beta_star + eps groups <- rep(1:(p / 5), each = 5) fit <- sparsegl(X, y, group = groups)"},{"path":"https://dajmcdon.github.io/sparsegl/reference/trust_experts.html","id":null,"dir":"Reference","previous_headings":"","what":"Trust in scientific experts during the Covid-19 pandemic — trust_experts","title":"Trust in scientific experts during the Covid-19 pandemic — trust_experts","text":"dataset containing measurement \"trust\" experts along metrics collected Delphi Group Carnegie Mellon University U.S. COVID-19 Trends Impact Survey, partnership Facebook. particular dataset created one public contingency tables, specifically, breakdown state, age, gender, race/ethnicity published 05 February 2022.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/trust_experts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trust in scientific experts during the Covid-19 pandemic — trust_experts","text":"","code":"trust_experts"},{"path":"https://dajmcdon.github.io/sparsegl/reference/trust_experts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Trust in scientific experts during the Covid-19 pandemic — trust_experts","text":"sparse Matrix::sparseMatrix() 3775 rows, 96 columns, 51738 non-zero entries y Real-valued response. average pct_trust_covid_info_* * doctors, experts, cdc, govt_health. yyyy-mm-01 0-1-valued predictor. Start date data collection period. 8 monthly periods AK-WY 0-1-valued predictor. State abbreviation. age_* 0-1-valued predictor. Self-reported age bucket. gender_* 0-1-valued predictor. Self-reported gender. race_* 0-1-valued predictor. Self-reported race. cli_* Real-valued predictor. pct_cli expanded B-spline basis 10 degrees freedom. cmnty_cli_* Real-valued predictor. pct_hh_cmnty_cli expanded B-spline basis 10 degrees freedom.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/reference/trust_experts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Trust in scientific experts during the Covid-19 pandemic — trust_experts","text":"U.S. COVID-19 Trends Impact Survey. paper describing survey: Joshua . Salomon, Alex Reinhart, Alyssa Bilinski, Eu Jing Chua, Wichada La Motte-Kerr, Minttu M. Rönn, Marissa Reitsma, Katherine Ann Morris, Sarah LaRocca, Tamar Farag, Frauke Kreuter, Roni Rosenfeld, Ryan J. Tibshirani (2021). \"US COVID-19 Trends Impact Survey: Continuous real-time measurement COVID-19 symptoms, risks, protective behaviors, testing, vaccination\", Proceedings National Academy Sciences 118 (51) e2111454118. doi:10.1073/pnas.2111454118 . Public Delphi US CTIS Documentation","code":""},{"path":[]},{"path":"https://dajmcdon.github.io/sparsegl/news/index.html","id":"sparsegl-040","dir":"Changelog","previous_headings":"","what":"sparsegl 0.4.0","title":"sparsegl 0.4.0","text":"Add option weight individual coefficients l1 penalty. Remove coercions type (<matrix>, \"dgCMatrix\"). deprecated Matrix>=1.4-2 Warn CRAN checks. Compute MSE internally Fortran family = \"Gaussian\". Avoids creation potentially large matrix predicted values purposes risk estimation. Revise estimate_risk() signature. Now x optional y required.","code":""},{"path":"https://dajmcdon.github.io/sparsegl/news/index.html","id":"sparsegl-030","dir":"Changelog","previous_headings":"","what":"sparsegl 0.3.0","title":"sparsegl 0.3.0","text":"CRAN release: 2022-03-07 Initial version CRAN.","code":""}]
